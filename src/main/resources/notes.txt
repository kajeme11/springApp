SPRING FRAMEWORK

-Decouples classes
classes can become less dependent on each other by
using dependency injection instead of extending pr
initializing objects inside the business logic
Interfaces can help achieve loosely coupled
classes

* SpringFramework main feature:
- Dependency Injection, core feature to develop loose coupled apps (IOC)
- Java Enterprise Development framework

* Layered Approach:
- Web Layer (presentation) (Controller, servlet), responds to http requests
@Controller, @RestController
- Service Layer (Busines logic)
@Service
- Persistance Layer (DAO, intereact with db), uses JDBC or JPA Hibernate
@Repository
For configurations inside a class:
@Configuration

* Spring is a versitile framework, you can use many different
modules to develop an end to end app
modules such as spring web, jpa, aop, security

* Spring core module
-BeanFactory, Application Context
-IOC, DI using Xml, annotations, Autowire

*configuration xml file will create beans and pass the
to IOC container to manage

*ApplicatioContext, Eager initialization, asking to create all beans even if not needed

*BeanFactory, Lazy initialization, Objects will not be created until they are going to be used


setter injection DI:
<property ref="jc" name="course"></property>

constrctor injection di:
<constructor-arg ref="sc" name="course"></constructor-arg>

Autowire
 <bean id="tc" class="com.springApp.proj.service.TargetCourse" autowire="byType">
 <bean id="tc" class="com.springApp.proj.service.TargetCourse" autowire="">

 SET PRIMARY AS TRUE TO LOSE AMBIGUITY
 <bean id="sc" class="com.springApp.proj.service.courses.SpringCourse" primary="true" />


 Spring Framework will create beans from component annotations:
 The following are @Component and logic, their base is @Component:
    @Service, @Repository, @Configuration, @Controller


